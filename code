void exec_cmd(char *command)
{
    argsCount = 0;

    // Xử lý chuỗi nhập vào
    char *token = strtok(command, " "); // Tách chuỗi ký tự đầu tiên ra khi có dấu cách và lưu vào token
    while (token != NULL)
    {
        args[argsCount++] = token; // args[i] bằng một chuỗi ký tự ngăn bởi dấu cách hay nói cách khác là một từ; có tối đa 41 từ trên một dòng
        token = strtok(NULL, " "); // Tiếp tục tách chuỗi đến khi token là ký tự rỗng khi bị cắt bởi dấu cách
    }
    args[argsCount] = NULL; // Từ cuối cùng sẽ là kết thúc chuỗi từ

    // Nếu lệnh là chuyển hướng đầu vào ra
    int input_fd, output_fd;
    int redirect_input = 0, redirect_output = 0;

    for (int j = 0; j < argsCount; j++)
    {
        // Dấu hiệu chuyển hướng đầu ra của một tệp
        if (strcmp(args[j], ">") == 0)
        {
            args[j] = NULL;      // Đánh dấu vị trí chuyển hướng là NULL
            redirect_output = 1; // Cờ chuyển hướng đầu ra

            if (args[j + 1] == NULL)
            { // Nơi đầu ra được chuyển hướng vào là NULL nghĩa là không có file output.
                printf("Missing output file\n");
                exit(EXIT_FAILURE); // Sửa thành EXIT_FAILURE
            }
            else
            {
                output_fd = open(args[j + 1], O_WRONLY | O_CREAT | O_TRUNC, 0644);
                if (output_fd < 0)
                {
                    perror("Error opening output file");
                    exit(EXIT_FAILURE);
                }
                dup2(output_fd, STDOUT_FILENO); // Chuyển đầu ra sang file
                close(output_fd);
            }
        }
    }

    // Thực thi lệnh
    if (execvp(args[0], args) == -1)
    {
        perror("Error executing command");
        exit(EXIT_FAILURE);
    }
}
